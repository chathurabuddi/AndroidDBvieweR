/*
 * Copyright (C) 2016 thedathoudarya
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.clough.android.adbv.view;

import com.clough.android.adbv.model.Field;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ThedathOudarya
 */
public class CreateTableDialog extends javax.swing.JDialog {

    private final MainFrame mainFrame;
    private final TableColumnModel databaseTableColumnModel;
    private final DefaultTableModel databaseConfigDefaultTable;
    private final TableColumn columnHash;
    private final TableColumn columnName;
    private final TableColumn columnType;
    private final TableColumn columnPrimaryKey;
    private final TableColumn columnNotNull;
    private final TableColumn columnAutoIncrement;
    private final TableColumn columnUnion;
    private final TableColumn columnDefault;
    private final Map<String, ArrayList<Field>> databaseTableMap = new HashMap<String, ArrayList<Field>>();
    private final Map<String, String> tableQueryList = new HashMap<String, String>();

    /**
     * Creates new form DatabaseBuilderFrame
     * @param frame
     * @param modal
     */
    public CreateTableDialog(Frame frame, boolean modal) {
        super(frame, modal);
        this.mainFrame = (MainFrame) frame;
        initComponents();
        setLocationRelativeTo(null);
        setMinimumSize(new Dimension(700, 540));
        databaseConfigDefaultTable = (DefaultTableModel) databaseConfigTable.getModel();
        databaseTableColumnModel = databaseConfigTable.getColumnModel();

        columnHash = databaseTableColumnModel.getColumn(0);
        columnName = databaseTableColumnModel.getColumn(1);
        columnType = databaseTableColumnModel.getColumn(2);
        Object[] fieldTypes = new Object[]{
            "INTEGER",
            "VARCHAR",
            "DECIMAL",
            "TEXT",
            "DATETIME",
            "TINYINT",
            "BLOB",
            "SMALLINT",
            "MEDIUMINT",
            "BIGINT",
            "CHARACTER",
            "REAL",
            "DOUBLE",
            "FLOAT",
            "BOOLEAN",
            "DATE"
        };
        final JComboBox fieldTypeComboBox = new JComboBox(fieldTypes);
        fieldTypeComboBox.setEditable(false);
        fieldTypeComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                String selectedItem = fieldTypeComboBox.getSelectedItem().toString();
                if (Boolean.parseBoolean(databaseConfigTable.getValueAt(databaseConfigTable.getSelectedRow(), 5).toString()) && !(selectedItem.equals("INTEGER") || selectedItem.equals("INTEGER"))) {
                    databaseConfigTable.setValueAt(false, databaseConfigTable.getSelectedRow(), 5);
                }
            }
        });
        columnType.setCellEditor(new DefaultCellEditor(fieldTypeComboBox));
        columnPrimaryKey = databaseTableColumnModel.getColumn(3);
        columnNotNull = databaseTableColumnModel.getColumn(4);
        columnAutoIncrement = databaseTableColumnModel.getColumn(5);
        columnUnion = databaseTableColumnModel.getColumn(6);
        columnDefault = databaseTableColumnModel.getColumn(7);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableNameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        addFieldButton = new javax.swing.JButton();
        removeFieldButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        databaseConfigTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqliteQueryTextArea = new javax.swing.JTextArea();
        createTablesButton = new javax.swing.JButton();
        generateCreateStatementButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Table name : ");

        jPanel1.setLayout(new java.awt.GridLayout(1, 4, 3, 2));

        addFieldButton.setText("Add Field");
        addFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFieldButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addFieldButton);

        removeFieldButton.setText("Remove Field");
        removeFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFieldButtonActionPerformed(evt);
            }
        });
        jPanel1.add(removeFieldButton);

        moveUpButton.setText("Move Up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });
        jPanel1.add(moveUpButton);

        moveDownButton.setText("Move Down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });
        jPanel1.add(moveDownButton);

        databaseConfigTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Field Name", "Type", "PK", "NN", "AI", "UNI", "Default"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        databaseConfigTable.getTableHeader().setReorderingAllowed(false);
        databaseConfigTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                databaseConfigTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(databaseConfigTable);
        if (databaseConfigTable.getColumnModel().getColumnCount() > 0) {
            databaseConfigTable.getColumnModel().getColumn(0).setResizable(false);
            databaseConfigTable.getColumnModel().getColumn(1).setResizable(false);
            databaseConfigTable.getColumnModel().getColumn(2).setResizable(false);
            databaseConfigTable.getColumnModel().getColumn(3).setResizable(false);
            databaseConfigTable.getColumnModel().getColumn(4).setResizable(false);
            databaseConfigTable.getColumnModel().getColumn(5).setResizable(false);
            databaseConfigTable.getColumnModel().getColumn(6).setResizable(false);
            databaseConfigTable.getColumnModel().getColumn(7).setResizable(false);
        }

        sqliteQueryTextArea.setEditable(false);
        sqliteQueryTextArea.setBackground(new java.awt.Color(124, 124, 124));
        sqliteQueryTextArea.setColumns(20);
        sqliteQueryTextArea.setFont(new java.awt.Font("Miriam Fixed", 0, 13)); // NOI18N
        sqliteQueryTextArea.setRows(5);
        jScrollPane2.setViewportView(sqliteQueryTextArea);

        createTablesButton.setText("Create tables");
        createTablesButton.setEnabled(false);
        createTablesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTablesButtonActionPerformed(evt);
            }
        });

        generateCreateStatementButton.setText("Generate Create Statement");
        generateCreateStatementButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCreateStatementButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tableNameTextField))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generateCreateStatementButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(createTablesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateCreateStatementButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createTablesButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFieldButtonActionPerformed
        // TODO add your handling code here:
        databaseConfigDefaultTable.addRow(new Object[]{databaseConfigTable.getRowCount(), "Field" + databaseConfigTable.getRowCount(), "INTEGER", false, false, false, false, ""});
    }//GEN-LAST:event_addFieldButtonActionPerformed

    private void generateCreateStatementButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCreateStatementButtonActionPerformed
        // TODO add your handling code here:                
        ArrayList<Field> fieldList = new ArrayList<Field>();
        String tableName = tableNameTextField.getText();
        String tableFieldQuery = "";
        boolean autoincrementFiledFound = false;
        for (int rowIndex = 0; rowIndex < databaseConfigTable.getRowCount(); rowIndex++) {
            int fieldIndex = Integer.parseInt(databaseConfigTable.getValueAt(rowIndex, 0).toString());
            String fieldName = databaseConfigTable.getValueAt(rowIndex, 1).toString().trim();
            String fieldType = databaseConfigTable.getValueAt(rowIndex, 2).toString().trim();
            boolean isPrimaryKey = Boolean.parseBoolean(databaseConfigTable.getValueAt(rowIndex, 3).toString());
            boolean isNotNull = Boolean.parseBoolean(databaseConfigTable.getValueAt(rowIndex, 4).toString());
            boolean isAutoIncrementing = Boolean.parseBoolean(databaseConfigTable.getValueAt(rowIndex, 5).toString());
            boolean isUnique = Boolean.parseBoolean(databaseConfigTable.getValueAt(rowIndex, 6).toString());
            String defaultValue = databaseConfigTable.getValueAt(rowIndex, 7).toString().trim();
            Field field = new Field(fieldIndex, fieldName, fieldType, isPrimaryKey, isNotNull, isAutoIncrementing, isUnique, defaultValue);
            fieldList.add(field);
            tableFieldQuery = tableFieldQuery.concat("\n\t" + fieldName + " ").concat(fieldType + " ");
            if (isNotNull) {
                tableFieldQuery = tableFieldQuery.concat("not null ");
            }
            if (defaultValue != null && !defaultValue.equals("")) {
                tableFieldQuery = tableFieldQuery.concat("default '" + defaultValue + "' ");
            }
            if (isAutoIncrementing) {
                autoincrementFiledFound = true;
                tableFieldQuery = tableFieldQuery.concat("primary key autoincrement ");
            }
            if (isUnique) {
                tableFieldQuery = tableFieldQuery.concat("unique ");
            }
            if ((databaseConfigTable.getRowCount() - 1) != rowIndex) {
                tableFieldQuery = tableFieldQuery.concat(", ");
            }
        }
        String primaryKeyFieldQuery = "";
        if (!autoincrementFiledFound) {
            for (Field field : fieldList) {
                if (field.isFieldPrimarKey()) {
                    primaryKeyFieldQuery = primaryKeyFieldQuery.concat(field.getFieldName() + ", ");
                }
            }
        }

        if (!primaryKeyFieldQuery.equals("")) {
            primaryKeyFieldQuery = primaryKeyFieldQuery.substring(0, primaryKeyFieldQuery.length() - 2);
            tableFieldQuery = tableFieldQuery.concat(", \n\tprimary key(" + primaryKeyFieldQuery + ")");
        }

        databaseTableMap.put(tableName, fieldList);
        String tableQuery = "create table " + tableName + " (" + tableFieldQuery + "\n)\n";
        tableQueryList.put(tableName,tableQuery);
        sqliteQueryTextArea.setText(sqliteQueryTextArea.getText().concat(tableQuery));

        databaseConfigDefaultTable.setRowCount(0);
        databaseConfigDefaultTable.fireTableDataChanged();
        tableNameTextField.setText("");
        createTablesButton.setEnabled(true);
    }//GEN-LAST:event_generateCreateStatementButtonActionPerformed

    private void removeFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFieldButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex;
        if ((selectedRowIndex = databaseConfigTable.getSelectedRow()) != -1) {
            databaseConfigDefaultTable.removeRow(selectedRowIndex);
        }
    }//GEN-LAST:event_removeFieldButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex;
        if ((selectedRowIndex = databaseConfigTable.getSelectedRow()) > 0) {
            databaseConfigDefaultTable.moveRow(selectedRowIndex, selectedRowIndex, selectedRowIndex - 1);
            databaseConfigDefaultTable.fireTableDataChanged();
            databaseConfigTable.addRowSelectionInterval(selectedRowIndex - 1, selectedRowIndex - 1);
        }
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        // TODO add your handling code here:int selectedRowIndex;
        int selectedRowIndex;
        if ((selectedRowIndex = databaseConfigTable.getSelectedRow()) < (databaseConfigTable.getRowCount() - 1)) {
            databaseConfigDefaultTable.moveRow(selectedRowIndex, selectedRowIndex, selectedRowIndex + 1);
            databaseConfigDefaultTable.fireTableDataChanged();
            databaseConfigTable.addRowSelectionInterval(selectedRowIndex + 1, selectedRowIndex + 1);
        }
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void databaseConfigTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_databaseConfigTableMousePressed
        // TODO add your handling code here:
        int selectedColumn = databaseConfigTable.getSelectedColumn();
        int selectedRow = databaseConfigTable.getSelectedRow();

        int rowCount = databaseConfigDefaultTable.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            if (selectedColumn == 3 && Boolean.parseBoolean(databaseConfigTable.getValueAt(i, 5).toString())) {
                databaseConfigTable.setValueAt(false, i, 5);
                break;
            } else if (selectedColumn == 5) {
                databaseConfigTable.setValueAt(false, i, 3);
                databaseConfigTable.setValueAt(false, i, 5);
            }
        }

        if (selectedColumn == 5) {
            databaseConfigTable.setValueAt(true, selectedRow, 3);
            databaseConfigTable.setValueAt(true, selectedRow, 5);
            databaseConfigTable.setValueAt("INTEGER", selectedRow, 2);
        }

    }//GEN-LAST:event_databaseConfigTableMousePressed

    private void createTablesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTablesButtonActionPerformed
        // TODO add your handling code here: 
        mainFrame.setTableQueryList(tableQueryList);
        dispose();
    }//GEN-LAST:event_createTablesButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFieldButton;
    private javax.swing.JButton createTablesButton;
    private javax.swing.JTable databaseConfigTable;
    private javax.swing.JButton generateCreateStatementButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JButton removeFieldButton;
    private javax.swing.JTextArea sqliteQueryTextArea;
    private javax.swing.JTextField tableNameTextField;
    // End of variables declaration//GEN-END:variables
}
